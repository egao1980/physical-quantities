(in-package :pq)

(defrule value () form)
(defrule unit-factor () (and (? (or '/ 'per '|per|)) (not '->) (? (and (or '^ '** (and 'to 'the) (and '|to| '|the|)) form)))
  (:destructure (per symb exponent) `(make-uf ,(symbol-name symb) ,(if exponent (if per `(- ,(second exponent)) (second exponent)) (if per -1 1)))))
(defrule error () (and (or '+/- '+-) value (? '%))
  (:destructure (pm val percent) (declare (ignore pm)) (if percent `(- (/ ,val 100)) val)))
(defrule errval () (and value (? error))
  (:destructure (val err) (list val (if err err 0))))
(defrule conversion () (and '-> (+ unit-factor))
  (:destructure (arrow unit-factors) (declare (ignore arrow)) unit-factors))
(defrule unit () (* unit-factor))
(defrule quantity () (and errval unit (? conversion)))
(defrule unit-definition () (and form unit)
  (:destructure (conv unit-factors) `(,conv (list ,@unit-factors))))
