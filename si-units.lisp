(in-package :pq)

(defun define-si-units (&key clear-existing-units)
  (when clear-existing-units
    (clear-units))
  (define-unit-prefixes
    (yocto y -24)
    (zepto z -21)
    (atto a  -18)
    (femto f -15)
    (pico p -12)
    (nano n -9)
    (micro u -6)
    (milli m -3)
    (centi c -2)
    (deci d -1)
    (deca da 1)
    (hecto h 2)
    (kilo k 3)
    (mega meg 6)
    (giga g 9)
    (tera t 12)
    (peta pet 15)
    (exa e 18)
    (zetta zet 21)
    (yotta yot 24)
    (kibi ki 1 :base 1024)
    (mebi mi 2 :base 1024)
    (gibi gi 3 :base 1024)
    (tebi ti 4 :base 1024)
    (pebi pi 5 :base 1024)
    (exbi ei 6 :base 1024)
    (zebi zi 7 :base 1024)
    (yobi yi 8 :base 1024))
  ;; SI base units
  (define-unit metre :abbrev m :alias meter :prefix-test (prefix-range 10 nil 3))
  (define-unit gram :abbrev g :prefix-test (prefix-and (prefix-base 10 3) (prefix-range 10 nil 3)))
  (define-unit second :abbrev s :prefix-test (prefix-range 10 nil -3))
  (define-unit ampere :abbrev a :prefix-test (prefix-and (prefix-base 10 3) (prefix-range 10 nil 3)))
  (define-unit kelvin :abbrev k :prefix-test (prefix-base 10 3))
  (define-unit mole :abbrev mol :prefix-test (prefix-base 10))
  (define-unit candela :abbrev cd :prefix-test (prefix-base 10 3))
  ;; Named units derived from SI base units
  (define-unit radian :def (1) :abbrev rad :prefix-test (prefix-range 10 nil -3))
  (define-unit steradian :def (1) :abbrev sr :prefix-test (prefix-range 10 nil -3))
  (define-unit hertz :def (1 / second) :abbrev hz :prefix-test (prefix-base 10 3))
  (define-unit newton :def (1 kilogram metre / second ^ 2) :abbrev n :prefix-test (prefix-base 10 3))
  (define-unit pascal :def (1 newton / metre ^ 2) :prefix-test (prefix-base 10 3))
  (define-unit joule :def (1 newton metre) :abbrev j :prefix-test (prefix-base 10 3))
  (define-unit watt :def (1 joule / second) :abbrev w :prefix-test (prefix-base 10 3))
  (define-unit coulomb :def (1 ampere second) :abbrev c :prefix-test (prefix-base 10 3))
  (define-unit volt :def (1 watt / ampere) :abbrev v :prefix-test (prefix-and (prefix-base 10 3) (prefix-range 10 nil 15)))
  (define-unit farad :def (1 coulomb / volt) :abbrev f :prefix-test (prefix-and (prefix-base 10 3) (prefix-range 10 nil 3)))
  (define-unit ohm :def (1 volt / ampere) :prefix-test (prefix-base 10 3))
  (define-unit siemens :def (1 ampere / volt) :prefix-test (prefix-base 10 3))
  (define-unit weber :def (1 volt second) :abbrev wb :prefix-test (prefix-base 10 3))
  (define-unit tesla :def (1 weber / metre ^ 2) :abbrev t :prefix-test (prefix-base 10 3))
  (define-unit henry :def (1 weber / ampere) :prefix-test (prefix-base 10 3))
  (define-unit celsius :def (1 kelvin) :prefix-test (prefix-base 10 3))
  (define-unit lumen :def (1 candela steradian) :abbrev lm :prefix-test (prefix-base 10 3))
  (define-unit lux :def (1 lumen / metre ^ 2) :abbrev lx :prefix-test (prefix-base 10 3))
  (define-unit becquerel :def (1 / second) :abbrev bq :prefix-test (prefix-base 10 3))
  (define-unit gray :def (1 joule / kilogram) :abbrev gy :prefix-test (prefix-base 10 3))
  (define-unit sievert :def (1 joule / kilogram) :abbrev sv :prefix-test (prefix-base 10 3))
  (define-unit katal :def (1 mol / second) :abbrev kat :prefix-test (prefix-base 10 3))
  (define-unit byte :def (1) :abbrev b :prefix-test (prefix-or (prefix-base 1024) (prefix-range 10 3 nil)))
  ;; Non-SI units accepted for use with SI
  (define-unit minute :def (60 second) :abbrev min :prefix-test (constantly nil))
  (define-unit hour :def (60 minute) :abbrev h :prefix-test (constantly nil))
  (define-unit day :def (24 hour) :abbrev d :prefix-test (constantly nil))
  (define-unit litre :def (1 decimetre ^ 3) :abbrev l :prefix-test (prefix-range 10 nil 2))
  (define-unit tonne :def (1000 kilogram) :prefix-test (prefix-range 10 3 nil))
  (define-unit au :def (149597870700 metre) :prefix-test (constantly nil))
  (define-unit electronvolt :def (1.6021765314d-19 joule) :abbrev ev :prefix-test (prefix-base 10 3))
  (define-unit dalton :def (1.6605388628e-27 kilogram) :abbrev (u da) :prefix-test (constantly nil)))
(export 'define-si-units)
